apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

version = "2.0-SNAPSHOT"

mainClassName = 'co.paralleluniverse.spacebase.galaxy.DistributedSpaceBaseDemo'
//ext.mainClass = mainClassName

repositories {
    flatDir { 
        dirs 'baselib'
        dirs 'libs'
        dirs 'cacheLibs/natives','cacheLibs' 
    }
    // Comment out these for offline mode. see more instructions near CopyLibs task
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/releases" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "http://download.oracle.com/maven/" }
    }
}

configurations {
    quasar
    natives
    proprietary
}
    
dependencies {
    proprietary "co.paralleluniverse:spacebase-core:2.1-SNAPSHOT"
    proprietary "co.paralleluniverse:spacebase-galaxy:2.1-SNAPSHOT"
    proprietary "co.paralleluniverse:galaxy:1.3-SNAPSHOT"
    compile "co.paralleluniverse:galaxy:1.3-SNAPSHOT"
    compile "co.paralleluniverse:spacebase-core:2.1-SNAPSHOT"
    compile "co.paralleluniverse:spacebase-galaxy:2.1-SNAPSHOT"
    compile "co.paralleluniverse:quasar-core:0.4.0-SNAPSHOT"
    compile "co.paralleluniverse:quasar-actors:0.4.0-SNAPSHOT"
    compile "com.google.guava:guava:15.0"
    compile "com.codahale.metrics:metrics-core:3.0.1" 

    quasar  "co.paralleluniverse:quasar-core:0.4.0-SNAPSHOT"
    
    // we need the following only because the jars are in a lib directory, and gradle doesn't know about their transitive dependencies
    runtime "net.sf.trove4j:trove4j:3.0.3"
    runtime "org.ow2.asm:asm:4.2", "org.ow2.asm:asm-commons:4.2", "org.ow2.asm:asm-util:4.2", "org.ow2.asm:asm-tree:4.2", "org.ow2.asm:asm-analysis:4.2"
    runtime "org.slf4j:slf4j-api:1.7.5"
    runtime "org.apache.logging.log4j:log4j-slf4j-impl:2.0-beta9", "org.apache.logging.log4j:log4j-api:2.0-beta9", "org.apache.logging.log4j:log4j-core:2.0-beta9"
    runtime "com.lmax:disruptor:3.2.0" // required for log4j
    compile("com.esotericsoftware.kryo:kryo:2.22") {
        exclude group: "org.ow2.asm", module: '*'
    }
    compile("de.javakaffee:kryo-serializers:0.26") {
        exclude group: "com.esotericsoftware.kryo", module: '*'
    }
    runtime "org.springframework:spring-core:3.2.5.RELEASE"
    runtime "org.springframework:spring-beans:3.2.5.RELEASE"
    runtime "org.springframework:spring-context:3.2.5.RELEASE"
    runtime "org.springframework:spring-expression:3.2.5.RELEASE"
    runtime "org.springframework:spring-aop:3.2.5.RELEASE"
    runtime "com.codahale.metrics:metrics-core:3.0.1" 
    runtime "io.netty:netty:3.8.0.Final"
    runtime "org.jgroups:jgroups:3.4.1.Final"
    runtime "com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4"
    runtime "com.sleepycat:je:5.0.73"
    runtime "co.parallelunivese:high-scale-lib:" // non-Maven
    runtime "org.apache:commons-logging:1.1.1"
}

task copyProprietary(type: Sync) {
    from { configurations.proprietary }
    into { "${rootProject.projectDir}/libs" }
}

/////// For Offline mode do the following
//// Run copyLibs when you are online
//// and then comment the following to dependsOn rule
task copyLibs(type: Sync) {
    dependsOn copyProprietary
    from { configurations.runtime }
    into { "${rootProject.projectDir}/cacheLibs" }
}
//// comment out after running copyLibs
compileJava.dependsOn copyProprietary
////// End of offline mode part

//task(runWithArgs, dependsOn: 'classes', type: JavaExec) {
//task(run, dependsOn: 'classes', type: JavaExec) {
run {
    classpath = sourceSets.main.runtimeClasspath
    if(project.hasProperty('args')){
        args project.args.split('\\s+')
    }
    if(project.hasProperty('mainClass')){
        main = project.mainClass
    }
}

tasks.withType(JavaExec) {
    jvmArgs '-server'
    // systemProperty "co.paralleluniverse.fibers.DefaultFiberPool.parallelism", "4"
    systemProperty "co.paralleluniverse.fibers.DefaultFiberPool.monitor", "JMX" // "METRICS" // "NONE" //

    // Quasar
    // jvmArgs "-javaagent:${configurations.quasar.iterator().next()}" // =vdmc (verbose, debug, allow monitors, check class)

    // Galaxy
    systemProperty "jgroups.bind_addr", "127.0.0.1"
    systemProperty "galaxy.multicast.address", "225.0.0.1"
    systemProperty "galaxy.multicast.port", "7050"
    systemProperty "co.paralleluniverse.galaxy.configFile", "config/peer.xml"
    systemProperty "co.paralleluniverse.galaxy.autoGoOnline", "true"
        
    // memory
    jvmArgs '-Xmx1024m'
    jvmArgs '-XX:+UseParallelGC'
    jvmArgs '-XX:+UseCondCardMark'
    // jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=50'
    
    // profiling
    // jvmArgs '-XX:+UnlockCommercialFeatures', '-XX:+FlightRecorder'
    // systemProperty 'co.paralleluniverse.db.monitoring.profileQueries', 'true'
    // jvmArgs '-verbose:gc'
    // jvmArgs '-XX:+UnlockDiagnosticVMOptions', '-XX:+TraceClassLoading', '-XX:+LogCompilation' // use with jitwatch
    // jvmArgs '-XX:+UnlockDiagnosticVMOptions', '-XX:+PrintInlining'
    
    // logging
    systemProperty "log4j.configurationFile", "log4j.xml"
    systemProperty "Log4jContextSelector", "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
    
    // debugging
    // jvmArgs '-ea'
    // systemProperty "co.paralleluniverse.debugMode", "true"
    systemProperty "co.paralleluniverse.globalFlightRecorder", "true"
    systemProperty "co.paralleluniverse.flightRecorderDumpFile", "spaceships.log"
    systemProperty "co.paralleluniverse.monitoring.flightRecorderLevel", "1"
    systemProperty "co.paralleluniverse.monitoring.flightRecorderSize","100000" 
}

applicationDistribution.from(projectDir) {
    include 'spaceships.properties'
    include 'log4j.xml'
    into ''
}

startScripts {
    applicationName = 'distributed-spacebase-demo'
    mainClassName = 'co.paralleluniverse.spacebase.galaxy.DistributedSpaceBaseDemo'
    defaultJvmOpts = run.jvmArgs.findAll{!it.startsWith('-javaagent:')} + 
    run.systemProperties.collect { k,v -> "-D$k=$v" } +
    ["-javaagent:lib/${configurations.quasar.iterator().next().name}"]
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}

task classpath << {
    println configurations.runtime.files.join(':')
}

task jvmArgs << {
    println ((run.jvmArgs + run.systemProperties.collect { k,v -> "-D$k=$v" }).join(' '))
}

defaultTasks 'build','run'